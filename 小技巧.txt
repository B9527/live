import {getCourseListsData, getCourseTbasData} from "./src/redux/home";

const mapActionsToProps = dispatch => bindActionCreators({
    getCourseTbasData,
    getCourseListsData,
    changeScrollTopShow() {
        let scrollY = window.scrollY;
        let tabsLoad = (scrollY > 150 ? true : false);
        //
        setTimeout(() => {
            // dispatch(actions.toggleTopShow(tabsLoad))
            //  actions.toggleTopShow(tabsLoad)
        }, 0)
    }
}, dispatch);


// <div className={`${styles.back} hairline-h`} />



import { getQueryList, getCourseChannelQueryList, getCourseGroupQueryList, getSumGetChannelCourseGroup } from "../api";

const types = {
  BANNer_DATA: "banner_data",
  COURSE_TABS: "course_Tabs",
  LIST_DATA: "list_data",
  TOGGLE_SCROLL_TOP: "toggle_scroll_top",
  GROUP: "group"
};

const defaultState = {
  bannerData: [],
  tabsData: [],
  listData: [],
  selectedTab: 0,
  scrollLoad: false,
  group: []
};

export const homeRedurces = (state = defaultState, action) => {
  switch (action.type) {
    case types.BANNer_DATA:
      return { ...state, bannerData: action.payload };
    case types.COURSE_TABS:
      return { ...state, tabsData: action.payload };
    case types.LIST_DATA:
      return { ...state, listData: action.payload };
    case types.TOGGLE_SCROLL_TOP:
      return { ...state, scrollLoad: action.show };
    case types.GROUP:
      console.log(action);
      return state;
      //return { ...state, tabsData: action.payload };
    default:
      return state;
  }
};

export const actions = {
  banner: (params) => {
    return {
      payload: params,
      type: types.BANNer_DATA
    };
  },
  courseTabs: (params) => {
    return {
      payload: params,
      type: types.COURSE_TABS
    };
  },
  group: (params) => {
    return {
      payload: params,
      type: types.GROUP
    };
  },
  courseList: (params) => {
    return {
      payload: params,
      type: types.LIST_DATA
    };
  },
  toggleTopShow: (show) => ({
    type: types.TOGGLE_SCROLL_TOP,
    show
  })
};
export const getSumGetChannelCourseGroupData = (params) => {
  return (dispatch) => {
    getSumGetChannelCourseGroup(params).then(res => {
      dispatch(actions.group(res.Data.Data));
    });
  };
};

export const getQueryListData = (params) => {
  return (dispatch) => {
    getQueryList(params).then(res => {
      dispatch(actions.courseList(res.Data.Data));
    });

  };
};

export const getCourseListsData = (params) => {
  return (dispatch) => {
    getCourseGroupQueryList(params).then(res => {
      dispatch(actions.courseList(res.Data.Data));
    });
  };
};

export const getCourseTabsData = (params) => {
  return (dispatch) => {
    getCourseChannelQueryList(params).then(res => {
      dispatch(actions.courseTabs(res.Data));
    });
  };
};

